$schema:  http://json-schema.org/draft-04/schema#
title:    Task Exception Request
description: |
  Request for a run of a task to be resolved with an exception
type:     object
properties:
  reason:
    type:    string
    enum:
      - worker-shutdown
      - malformed-payload
      - resource-unavailable
      - internal-error
      - superseded
    description: |
      Reason that the task is resolved with an exception. This is a subset
      of the values for `resolvedReason` given in the task status structure.
      **Report `worker-shutdown`** if the run failed because the worker
      had to shutdown (spot node disappearing). In case of `worker-shutdown`
      the queue will immediately **retry** the task, by making a new run.
      This is much faster than ignoreing the issue and letting the task _retry_
      by claim expiration. For any other _reason_ reported the queue will not
      retry the task.
      **Report `malformed-payload`** if the `task.payload` doesn't match the
      schema for the worker payload, or referenced resource doesn't exists.
      In either case, you should still log the error to a log file for the
      specific run.
      **Report `resource-unavailable`** if a resource/service needed or
      referenced in `task.payload` is _temporarily_ unavailable. Do not use this
      unless you know the resource exists, if the resource doesn't exist you
      should report `malformed-payload`. Example use-case if you contact the
      index (a service) on behalf of the task, because of a declaration in
      `task.payload`, and the service (index) is temporarily down. Don't use
      this if a URL returns 404, but if it returns 503 or hits a timeout when
      you retry the request, then this _may_ be a valid exception. The queue
      assumes that workers have applied retries as needed, and will not retry
       the task.
      **Report `internal-error`** if the worker experienced an unhandled internal
      error from which it couldn't recover. The queue will not retry runs
      resolved with this reason, but you are clearly signaling that this is a
      bug in the worker code.
      **Report `superseded`** if a task can be determined to have been
      superseded by another task, meaning its results aren't of interest, the
      worker may report the task as _superseded_. The exact semantics of this
      feature is worker-specific, upon encountering you should consult the
      worker-specific documentation. Workers are free to use this exception as
      they see fit, but they **must** document the behavior. It's strongly
      recommended that the worker uploads a JSON artifact titled
      `public/superseded-by.json` with details of why the task was superseded,
      and a `taskId` property pointing to the task that superseded it.
      Example use-case: Consider a worker that computes the next prime greater
      than some number N given in `task.payload`, and then stores this prime in
      a global database. If upon claiming a task the worker does a lookup in
      the database and observes that the next time for N is already computed,
      then it may be useful to just report the task as `superseded`.
      In other cases a worker could also provide a facility by which
      task-specific could report the task as `superseded`, for example using a
      special exit code (not recommended, just illustrative).
additionalProperties:   false
required:
  - reason

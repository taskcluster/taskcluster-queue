$schema:  http://json-schema.org/draft-04/schema#
title:          "Worker-type Response"
description: |
  Response to a worker-type request from a provisioner.
type:           object
properties:
  provisionerId:
    title:        "Provisioner ID"
    type:         string
    minLength:    {$const: identifier-min-length}
    maxLength:    {$const: identifier-max-length}
    pattern:      {$const: identifier-pattern}
  workerType:
    type:         string
    title:        "WorkerType name"
    description: |
      WorkerType name.
    minLength:    {$const: identifier-min-length}
    maxLength:    {$const: identifier-max-length}
    pattern:      {$const: identifier-pattern}
  stability:
    title:        "Stability"
    description: |
      This is the stability of the worker-type. Accepted values:
        * `experimental`
        * `stable`
        * `deprecated`
    type:         string
    enum:         ["experimental", "stable", "deprecated"]
  description:
    title:        "Description"
    description: |
      Description of the worker-type.
    type:         string
  expires:
    title:        "Worker-type Expiration"
    description: |
      Date and time after which the worker-type will be automatically
      deleted by the queue.
    type:         string
    format:       date-time
  lastDateActive:
    title:        "Worker-type Last Date Active"
    description: |
      Date of the last time this worker-type was seen active. `lastDateActive` is updated every 6 hours
      but may be off by up-to 6 hours. Nonetheless, `lastDateActive` is a good indicator
      of when the worker-type was last seen active.
    type:         string
    format:       date-time
  actions:
    type:         array
    items:
      type:       object
      title:      Actions
      description: |
        Actions can be defined at any context higher than or at the
        action's context -- so a worker type or provisioner can have
        actions with context=worker. This should avoid unnecessary
        duplication of actions.
      properties:
        label:
          title:        "Label"
          description: |
            Short names for things like logging/error messages.
          type: string
        title:
          title:        "Title"
          description: |
            Appropriate title for any sort of Modal prompt.
        context:
          title:        "Context"
          description: |
            Actions have a "context" that is one of provisioner, worker-type,
            or worker, indicating which it applies to (so this action would
            appear in a menu for a specific worker). Actions can be defined
            at any context higher than or at the action's context -- so a
            worker type or provisioner can have actions with context=worker.
            This should avoid unnecessary duplication of actions.
          type:         string
          enum:         ["worker-type", "worker"]
        url:
          title:        "URL"
          description: |
            When the action is triggered, it will make a POST request to this URL.
            The request will be signed with the user's Taskcluster credentials.
          type:         string
          format:       uri
        description:
          title:        "Description"
          description: |
            Description of the provisioner.
          type:         string
      additionalProperties: false
      required:
        - label
        - title
        - context
        - url
        - description
additionalProperties: false
required:
  - workerType
  - provisionerId
  - description
  - stability
  - expires
  - lastDateActive
